definitions:
  authdto.LoginResponseDTO:
    properties:
      token:
        type: string
    type: object
  authdto.RegisterRequestDTO:
    properties:
      email:
        maxLength: 100
        minLength: 8
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  authdto.RegisterResponseDTO:
    properties:
      message:
        type: string
    type: object
  genricerror.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  logdto.CreateLogRequest:
    properties:
      action:
        type: string
      databaseQuery:
        type: string
      fileName:
        type: string
      ipaddress:
        type: string
      timestamp:
        type: string
      userID:
        type: string
    required:
    - timestamp
    type: object
host: localhost:8082
info:
  contact: {}
  description: API for ingesting and querying logs
  title: Log Ingestor Service API
  version: "1.0"
paths:
  /api/login:
    get:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token using query parameters
      parameters:
      - description: User username
        in: query
        name: username
        required: true
        type: string
      - description: User password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Login success with JWT token
          schema:
            $ref: '#/definitions/authdto.LoginResponseDTO'
        "400":
          description: 'error: Invalid input'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Invalid credentials'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Server error'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - Auth
  /api/logs:
    get:
      consumes:
      - application/json
      description: Get list of all logs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/logdto.CreateLogRequest'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/genricerror.ErrorResponse'
      summary: Get all logs
      tags:
      - Logs
    post:
      consumes:
      - application/json
      description: Create a new log record with provided details
      parameters:
      - description: Log to create
        in: body
        name: log
        required: true
        schema:
          $ref: '#/definitions/logdto.CreateLogRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/logdto.CreateLogRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/genricerror.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/genricerror.ErrorResponse'
      summary: Create a new log
      tags:
      - Logs
  /api/logs/{logId}:
    delete:
      description: Deletes a log by its ID
      parameters:
      - description: Log ID
        in: path
        name: logId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: log deleted successfully
        "404":
          description: log not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a specific log
      tags:
      - Logs
    get:
      consumes:
      - application/json
      description: Retrieve a log by its ID
      parameters:
      - description: Log ID
        in: path
        name: logId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/logdto.CreateLogRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/genricerror.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/genricerror.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/genricerror.ErrorResponse'
      summary: Get a specific log
      tags:
      - Logs
  /api/logs/search:
    get:
      consumes:
      - application/json
      description: Retrieve logs based on time range, source, or user
      parameters:
      - description: Start time (RFC3339)
        in: query
        name: start_time
        type: string
      - description: End time (RFC3339)
        in: query
        name: end_time
        type: string
      - description: Source IP address
        in: query
        name: source
        type: string
      - description: User ID
        in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/logdto.CreateLogRequest'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/genricerror.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/genricerror.ErrorResponse'
      summary: Search logs
      tags:
      - Logs
  /api/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with username and password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/authdto.RegisterRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Registration success
          schema:
            $ref: '#/definitions/authdto.RegisterResponseDTO'
        "400":
          description: 'error: Invalid input'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: 'error: Username already exists'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Server error'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Auth
swagger: "2.0"
